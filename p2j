<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF to JPG Converter</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
        :root {
            --primary-color: #1a73e8;
            --hover-color: #1765cc;
            --background-color: #f8f9fa;
            --card-color: #ffffff;
            --text-color: #3c4043;
            --border-color: #dadce0;
        }
        
        body {
            font-family: 'Google Sans', Roboto, Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--background-color);
            color: var(--text-color);
            min-height: 100vh;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 32px 24px;
        }
        
        .header {
            display: flex;
            align-items: center;
            margin-bottom: 32px;
        }
        
        .logo {
            display: flex;
            align-items: center;
            margin-right: 24px;
        }
        
        .logo-icon {
            font-size: 32px;
            color: var(--primary-color);
            margin-right: 16px;
        }
        
        .title {
            font-size: 22px;
            font-weight: 500;
            margin: 0;
        }
        
        .converter-card {
            background-color: var(--card-color);
            border-radius: 8px;
            box-shadow: 0 1px 2px 0 rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
            padding: 40px;
            text-align: center;
            margin-bottom: 24px;
        }
        
        .drop-area {
            border: 1px dashed var(--border-color);
            border-radius: 6px;
            padding: 60px 20px;
            margin-bottom: 20px;
            transition: all 0.3s;
            cursor: pointer;
        }
        
        .drop-area.highlight {
            border-color: var(--primary-color);
            background-color: rgba(26, 115, 232, 0.04);
        }
        
        .upload-icon {
            font-size: 48px;
            color: var(--primary-color);
            margin-bottom: 16px;
        }
        
        .file-input {
            display: none;
        }
        
        .browse-btn {
            background-color: var(--primary-color);
            color: white;
            padding: 10px 24px;
            border-radius: 4px;
            font-weight: 500;
            letter-spacing: 0.25px;
            cursor: pointer;
            border: none;
            font-size: 14px;
            margin-top: 16px;
            transition: background-color 0.3s;
        }
        
        .browse-btn:hover {
            background-color: var(--hover-color);
            box-shadow: 0 1px 2px 0 rgba(66, 133, 244, 0.3), 0 1px 3px 1px rgba(66, 133, 244, 0.15);
        }
        
        .filename-container {
            display: flex;
            align-items: center;
            margin-bottom: 24px;
        }
        
        .filename-input {
            flex: 1;
            padding: 10px 12px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 14px;
        }
        
        .filename-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }
        
        .progress-container {
            display: none;
            margin-bottom: 24px;
        }
        
        .progress-bar {
            height: 4px;
            background-color: #e0e0e0;
            border-radius: 2px;
            overflow: hidden;
            margin-bottom: 8px;
        }
        
        .progress {
            height: 100%;
            background-color: var(--primary-color);
            width: 0%;
            transition: width 0.3s;
        }
        
        .status {
            font-size: 14px;
            color: #5f6368;
        }
        
        .download-btn {
            background-color: var(--primary-color);
            color: white;
            padding: 10px 24px;
            border-radius: 4px;
            font-weight: 500;
            letter-spacing: 0.25px;
            cursor: pointer;
            border: none;
            font-size: 14px;
            display: none;
            transition: background-color 0.3s;
        }
        
        .download-btn:hover {
            background-color: var(--hover-color);
            box-shadow: 0 1px 2px 0 rgba(66, 133, 244, 0.3), 0 1px 3px 1px rgba(66, 133, 244, 0.15);
        }
        
        .page-preview {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 16px;
            margin-top: 24px;
        }
        
        .page-thumbnail {
            border: 1px solid var(--border-color);
            border-radius: 4px;
            overflow: hidden;
            height: 160px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f5f5f5;
        }
        
        .page-thumbnail img {
            max-width: 100%;
            max-height: 100%;
        }
        
        .page-number {
            font-size: 12px;
            text-align: center;
            margin-top: 4px;
            color: #5f6368;
        }
        
        @media (max-width: 600px) {
            .container {
                padding: 24px 16px;
            }
            
            .converter-card {
                padding: 24px;
            }
            
            .drop-area {
                padding: 40px 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">
                <i class="material-icons logo-icon">picture_as_pdf</i>
                <i class="material-icons logo-icon">arrow_forward</i>
                <i class="material-icons logo-icon">image</i>
            </div>
            <h1 class="title">PDF to JPG Converter</h1>
        </div>
        
        <div class="converter-card">
            <div id="dropArea" class="drop-area">
                <i class="material-icons upload-icon">cloud_upload</i>
                <p>Drag and drop your PDF file here</p>
                <p>or</p>
                <button class="browse-btn" id="browseBtn">Select PDF File</button>
                <input type="file" id="fileInput" class="file-input" accept=".pdf">
            </div>
        </div>
        
        <div class="filename-container">
            <input type="text" id="filenameInput" class="filename-input" placeholder="Output filename (without extension)" value="converted_images">
        </div>
        
        <div class="progress-container" id="progressContainer">
            <div class="progress-bar">
                <div class="progress" id="progressBar"></div>
            </div>
            <div class="status" id="status">Processing PDF...</div>
        </div>
        
        <div class="page-preview" id="pagePreview"></div>
        
        <button class="download-btn" id="downloadBtn">
            <i class="material-icons" style="vertical-align: middle; margin-right: 8px;">download</i>
            Download as ZIP
        </button>
    </div>

    <script>
        // Initialize PDF.js worker
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.worker.min.js';

        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('fileInput');
        const browseBtn = document.getElementById('browseBtn');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const status = document.getElementById('status');
        const downloadBtn = document.getElementById('downloadBtn');
        const pagePreview = document.getElementById('pagePreview');
        const filenameInput = document.getElementById('filenameInput');

        let pdfFile = null;
        let jpgBlobs = [];

        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });

        // Highlight drop area when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });

        // Handle dropped files
        dropArea.addEventListener('drop', handleDrop, false);

        // Handle file selection via browse button
        browseBtn.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', handleFiles);

        // Download button click handler
        downloadBtn.addEventListener('click', downloadZip);

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        function highlight() {
            dropArea.classList.add('highlight');
        }

        function unhighlight() {
            dropArea.classList.remove('highlight');
        }

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            if (files.length > 0 && files[0].type === 'application/pdf') {
                handleFiles({ target: { files: files } });
            }
        }

        function handleFiles(e) {
            const files = e.target.files;
            if (files.length === 0) return;

            pdfFile = files[0];
            convertPdfToJpg(pdfFile);
        }

        async function convertPdfToJpg(file) {
            // Reset previous state
            jpgBlobs = [];
            pagePreview.innerHTML = '';
            downloadBtn.style.display = 'none';
            progressContainer.style.display = 'block';
            status.textContent = 'Processing PDF...';
            progressBar.style.width = '0%';

            const fileReader = new FileReader();
            
            fileReader.onload = async function() {
                try {
                    const typedarray = new Uint8Array(this.result);
                    const pdf = await pdfjsLib.getDocument(typedarray).promise;
                    
                    status.textContent = `Converting ${pdf.numPages} pages to JPG...`;
                    
                    for (let i = 1; i <= pdf.numPages; i++) {
                        const page = await pdf.getPage(i);
                        progressBar.style.width = `${(i / pdf.numPages) * 100}%`;
                        
                        const viewport = page.getViewport({ scale: 1.5 });
                        const canvas = document.createElement('canvas');
                        const context = canvas.getContext('2d');
                        canvas.height = viewport.height;
                        canvas.width = viewport.width;
                        
                        await page.render({
                            canvasContext: context,
                            viewport: viewport
                        }).promise;
                        
                        // Convert canvas to JPG blob
                        canvas.toBlob(blob => {
                            jpgBlobs.push(blob);
                            
                            // Create preview thumbnail
                            const imgUrl = URL.createObjectURL(blob);
                            const thumbnailContainer = document.createElement('div');
                            thumbnailContainer.className = 'page-thumbnail-container';
                            
                            const thumbnail = document.createElement('div');
                            thumbnail.className = 'page-thumbnail';
                            
                            const img = document.createElement('img');
                            img.src = imgUrl;
                            img.alt = `Page ${i}`;
                            
                            const pageNumber = document.createElement('div');
                            pageNumber.className = 'page-number';
                            pageNumber.textContent = `Page ${i}`;
                            
                            thumbnail.appendChild(img);
                            thumbnailContainer.appendChild(thumbnail);
                            thumbnailContainer.appendChild(pageNumber);
                            pagePreview.appendChild(thumbnailContainer);
                            
                            // Update status when all pages are processed
                            if (jpgBlobs.length === pdf.numPages) {
                                status.textContent = 'Conversion complete! Ready to download.';
                                progressBar.style.width = '100%';
                                downloadBtn.style.display = 'inline-block';
                            }
                        }, 'image/jpeg', 0.9);
                    }
                } catch (error) {
                    console.error('Error converting PDF:', error);
                    status.textContent = 'Error converting PDF. Please try another file.';
                    progressBar.style.width = '0%';
                }
            };
            
            fileReader.readAsArrayBuffer(file);
        }

        async function downloadZip() {
            if (jpgBlobs.length === 0) return;

            status.textContent = 'Creating ZIP file...';
            progressBar.style.width = '0%';
            
            const zip = new JSZip();
            const imgFolder = zip.folder('images');
            
            jpgBlobs.forEach((blob, index) => {
                imgFolder.file(`page_${index + 1}.jpg`, blob);
            });
            
            const zipFilename = filenameInput.value.trim() || 'converted_images';
            
            try {
                const content = await zip.generateAsync({ type: 'blob' }, metadata => {
                    progressBar.style.width = `${metadata.percent}%`;
                });
                
                const zipUrl = URL.createObjectURL(content);
                const a = document.createElement('a');
                a.href = zipUrl;
                a.download = `${zipFilename}.zip`;
                document.body.appendChild(a);
                a.click();
                
                setTimeout(() => {
                    document.body.removeChild(a);
                    URL.revokeObjectURL(zipUrl);
                    status.textContent = 'Download complete!';
                }, 100);
            } catch (error) {
                console.error('Error creating ZIP:', error);
                status.textContent = 'Error creating ZIP file.';
            }
        }
    </script>
</body>
</html>


